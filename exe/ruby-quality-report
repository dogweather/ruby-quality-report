#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'tty-option'
require 'tty-table'
require 'pastel'

#
# ruby-quality-report
#
# This script outputs a CSV spreadsheet file showing the percentage
# of lines of code written by each author that have been flagged as
# having too high of a complexity.
#
#

SIXTY_DAYS_IN_SECONDS = 60 * 24 * 60 * 60

def create_combined_stats(part_stats, whole_stats)
  part_data  = make_data_set(part_stats)
  whole_data = make_data_set(whole_stats)

  whole_data.map do |label, whole_count|
    part_count = part_data[label] || 0
    percent    = float_to_percent(part_count.to_f / whole_count)

    { label:, part_count:, whole_count:, percent: }
  end
end

def make_data_set(two_column_data)
  hash = {}
  two_column_data.each_line do |line|
    count, label = line.split(' ')
    hash[label]  = count.to_i
  end
  hash
end

def generate_csv(combined_stats)
  generate_data(combined_stats)
    .map { |stats| [stats[:label], stats[:percent], stats[:part_count], stats[:whole_count]].join(',') }
    .tap { |x| x.prepend(['Author,Percent Flagged,Flagged Lines,All Lines']) }
    .join("\n")
end

def generate_table(combined_stats, colspec:, skip: '')
  table      = TTY::Table.new(header: ['Author', "Percent\nFlagged", "Flagged\nLines", "All\nLines",
                                       colspec.keys.first])
  table_data = generate_data(combined_stats).reject { should_skip?(_1) }
  static_column_values = colspec.values.first

  table_data.each do |stats|
    next if skip.include?(stats[:label])

    table << [
      { value: stats[:label],                       alignment: :left },
      { value: "#{stats[:percent]}%",               alignment: :right },
      { value: stats[:part_count],                  alignment: :right },
      { value: stats[:whole_count],                 alignment: :right },
      { value: static_column_values[stats[:label]], alignment: :left }
    ]
  end

  render_table(table, table_data)
end

def render_table(table, table_data)
  pastel = Pastel.new

  table.render(:unicode, alignment: :center, padding: [0, 1], multiline: true) do |renderer|
    renderer.border.style = :dim
    renderer.filter = lambda { |val, row_index, _col_index|
      if row_index <= 0
        # Header row
        val
      else
        case table_data[row_index - 1][:percent]
        when 0...40
          val
        when 40...50
          pastel.bold.yellow(val)
        else
          pastel.bold.red(val)
        end
      end
    }
  end
end

def generate_data(combined_stats)
  combined_stats
    .sort_by { |s| s[:percent] }
end

def should_skip?(stats)
  less_than_200_lines_total?(stats) || no_commits_in_last_60_days?(stats)
end

def less_than_200_lines_total?(stats)
  stats[:whole_count] < 200
end

def no_commits_in_last_60_days?(stats)
  author = stats[:label]

  # Get the last commit timestamp in Unix epoch format
  last_commit = `git log -1 --format="%at" --author="#{author}"`.chomp
  return true if last_commit.empty? # Handle case where author has no commits

  # Convert Unix timestamp to Time object
  last_commit_time = Time.at(last_commit.to_i)
  sixty_days_ago   = Time.now - SIXTY_DAYS_IN_SECONDS

  last_commit_time < sixty_days_ago
end

def float_to_percent(a_float)
  (Float(a_float) * 100).round(1)
end

#
# CLI Argument Parser
#
class Command
  include TTY::Option

  usage do
    program 'ruby-quality-report'
    no_command
    header 'Ruby Quality Report'
    desc <<~DESC
      Generate a report of the percentage of flagged lines of code written by each author. For improved relevance, it excludes:

        - authors with fewer than 200 lines of code
        - authors with no commits in the previous 60 days

      It runs these Rubocop metrics checks on *.rb files:

        ABC Size
        Block Length
        Block Nesting
        Cyclomatic Complexity
        Method Length
        Perceived Complexity

      Then, using git, it calculates the percentage of warnings per line written, per author. Each failing check is another warning.
    DESC

    example <<~EXAMPLE1
      Append a column showing employment status. The order of the keys in the JSON does not matter:
        $ ruby-quality-report --add-column '{"Status": {"Alice": "Employee", "Bob": "Contractor"}}'
    EXAMPLE1

    example <<~EXAMPLE2
      Skip one author:
        $ ruby-quality-report --skip Cathy
    EXAMPLE2
  end

  option :add_column do
    long '--add-column JSON'
    desc 'Add a static column to the report. This is a simple way to add information from another source. See the examples.'
  end

  flag :skip do
    long '--skip AUTHOR'
    desc 'Filter out a git author'
  end

  flag :help do
    short '-h'
    long '--help'
    desc 'Print this help'
  end

  def run
    if params[:help]
      print help
      exit 1
    elsif params.errors.any?
      puts params.errors.summary
      exit 1
    end
  end
end

#
# Execution begins here
#

command = Command.new
command.parse
command.run

colspec = JSON.parse(command.params[:add_column])
puts "Adding column:   #{colspec.keys.first}"

skip = command.params[:skip] || ''
puts "Skipping author: #{skip}" if skip != ''

PART_STATS     = `ruby-author-warnings | frequency-list`.freeze
WHOLE_STATS    = `ruby-line-authors | frequency-list`.freeze
COMBINED_STATS = create_combined_stats(PART_STATS, WHOLE_STATS)

puts generate_table(COMBINED_STATS, colspec:, skip:)
